// src/pages/QuestsPage.tsx
import React, { useEffect, useState } from 'react';
import { useQuests, Quest, QuestPeriod } from './questStore';
import { QuestCard } from './components/QuestCard';
import { AdminPanel } from './components/AdminPanel';
import { QuestModal } from './components/QuestModal';

const periodUpdateTimes = {
  daily: '00:00',
  weekly: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 00:00',
  monthly: '1-–µ —á–∏—Å–ª–æ, 00:00',
};

export default function QuestsPage() {
  const { quests, fetch, start, claim } = useQuests();
  const [isAdminOpen, setIsAdminOpen] = useState(false);
  const [modal, setModal] = useState<{ mode: 'create' | 'edit'; quest?: Quest } | null>(null);

  useEffect(() => {
    fetch();
    const t = setInterval(fetch, 30_000);
    return () => clearInterval(t);
  }, [fetch]);

  const periodOrder: QuestPeriod[] = ['daily', 'weekly', 'monthly'];
  const grouped = periodOrder.reduce(
    (acc, period) => {
      acc[period] = quests.filter((q) => q.period === period && q.status !== 'locked');
      return acc;
    },
    {} as Record<QuestPeriod, Quest[]>
  );

  const hasVisibleQuests = Object.values(grouped).some(group => group.length > 0);

  return (
    <div className="relative min-h-screen bg-gray-50">
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={`transition-opacity duration-300 ${isAdminOpen ? 'opacity-40 pointer-events-none' : 'opacity-100'}`}>
        <div className=" top-0 z-10 bg-white p-4  flex justify-between items-start">
          <h1 className="text-xl font-bold text-slate-800">–ö–≤–µ—Å—Ç—ã</h1>
          {/* –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
          <div className="flex flex-col items-end">
            <span className="text-xs font-medium text-slate-700 mb-1">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</span>
            <div
              className="relative w-8 h-4 flex items-center rounded-full bg-slate-400 cursor-pointer"
              onClick={() => setIsAdminOpen(!isAdminOpen)}
            >
              <div
                className={`absolute w-3 h-3 rounded-full bg-white shadow transition-transform duration-500 ${
                  isAdminOpen ? 'translate-x-8' : 'translate-x-0.5'
                }`}
              />
            </div>
          </div>
        </div>

        {/* –î–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ */}
        <div className="px-4 pb-4 text-xs text-slate-500 space-y-1">
          <p>üïó –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ {periodUpdateTimes.daily}</p>
          <p>üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ ‚Äî {periodUpdateTimes.weekly}</p>
          <p>üìÜ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ ‚Äî {periodUpdateTimes.monthly}</p>
        </div>

        <div className="p-4 pt-0 space-y-6">
          {hasVisibleQuests ? (
            periodOrder.map((period) => {
              const questsInPeriod = grouped[period];
              if (questsInPeriod.length === 0) return null;
              return (
                <div key={period}>
                  <h2 className="text-sm font-semibold text-slate-600 uppercase tracking-wider mb-2">
                    {period === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ' : period === 'weekly' ? '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ' : '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ'}
                  </h2>
                  <div className="space-y-3">
                    {questsInPeriod.map((q) => (
                      <QuestCard
                        key={q.id}
                        quest={q}
                        isAdmin={false}
                        onStart={() => start(q.id)}
                        onClaim={() => claim(q.id)}
                      />
                    ))}
                  </div>
                </div>
              );
            })
          ) : (
            <div className="text-center py-10 text-slate-500">
              –ö–≤–µ—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ!
            </div>
          )}
        </div>
      </div>

      {/* –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ø–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–≤–µ—Ä—Ö—É */}
      {isAdminOpen && <AdminPanel onClose={() => setIsAdminOpen(false)} onEdit={(q) => setModal({ mode: 'edit', quest: q })} onAdd={() => setModal({ mode: 'create' })} />}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {modal && (
        <QuestModal
          mode={modal.mode}
          initialData={modal.quest}
          onClose={() => setModal(null)}
        />
      )}

      <style>{`
        @keyframes slideDown {
          from { transform: translateY(-100%); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
        @keyframes slideUp {
          from { transform: translateY(0); opacity: 1; }
          to { transform: translateY(-100%); opacity: 0; }
        }
        .admin-page {
          animation: slideDown 0.5s ease-out;
        }
        .admin-page-closing {
          animation: slideUp 0.5s ease-in;
        }
      `}</style>
    </div>
  );
}